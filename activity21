using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

class TextCleaner
{
    private static readonly HashSet<string> StopWords = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
    {
        "the", "and", "a", "an", "of", "to", "in", "is", "you", "that" // common stopwords, can add more
    };

    // Trim lines and condense multiple spaces to single space
    public static string CleanText(string input)
    {
        // Normalize newlines first
        string[] lines = input.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

        var cleanedLines = lines.Select(line =>
        {
            // Remove non-printable characters except newlines (ASCII 32-126)
            var filtered = new StringBuilder();
            foreach (char c in line)
            {
                if (c >= 32 && c <= 126)
                    filtered.Append(c);
            }
            // Trim and condense spaces
            string trimmed = filtered.ToString().Trim();
            string condensed = Regex.Replace(trimmed, @"\s+", " ");
            return condensed;
        }).Where(line => !string.IsNullOrWhiteSpace(line));

        string cleanedText = string.Join("\n", cleanedLines);

        // Convert to Title Case using custom rule: capitalize first letter of each word, lower the rest
        cleanedText = TitleCase(cleanedText);

        return cleanedText;
    }

    // Title case by rule: each word first letter uppercase, rest lowercase
    private static string TitleCase(string text)
    {
        return string.Join(" ", text.Split(' ')
            .Select(word => word.Length > 0
                ? char.ToUpper(word[0]) + word.Substring(1).ToLower()
                : word));
    }

    // Count words by splitting on whitespace
    public static int CountWords(string text)
    {
        var words = Regex.Split(text, @"\s+").Where(w => !string.IsNullOrWhiteSpace(w));
        return words.Count();
    }

    // Count sentences by splitting on '.', '!', '?'
    public static int CountSentences(string text)
    {
        var sentences = Regex.Split(text, @"[.!?]+")
                             .Where(s => !string.IsNullOrWhiteSpace(s));
        return sentences.Count();
    }

    // Get top 5 words excluding stopwords
    public static List<(string word, int count)> TopWords(string text, int top = 5)
    {
        var words = Regex.Split(text.ToLower(), @"\W+")
                         .Where(w => !string.IsNullOrWhiteSpace(w) && !StopWords.Contains(w));

        var frequency = new Dictionary<string, int>();
        foreach (var w in words)
        {
            if (frequency.ContainsKey(w))
                frequency[w]++;
            else
                frequency[w] = 1;
        }

        return frequency.OrderByDescending(kv => kv.Value)
                        .Take(top)
                        .Select(kv => (kv.Key, kv.Value))
                        .ToList();
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("=== Text Report Cleaner (Normalization) ===");
        Console.WriteLine("Enter your multi-line text (end input with an empty line):");

        var lines = new List<string>();
        string line;
        while (!string.IsNullOrEmpty(line = Console.ReadLine()))
        {
            lines.Add(line);
        }

        string inputText = string.Join("\n", lines);

        string cleaned = TextCleaner.CleanText(inputText);

        Console.WriteLine("\n--- Cleaned Text ---");
        Console.WriteLine(cleaned);

        int wordCount = TextCleaner.CountWords(cleaned);
        int sentenceCount = TextCleaner.CountSentences(cleaned);
        var topWords = TextCleaner.TopWords(cleaned);

        Console.WriteLine($"\nWord count: {wordCount}");
        Console.WriteLine($"Sentence count: {sentenceCount}");
        Console.WriteLine("Top 5 words (ignoring stopwords):");
        foreach (var (word, count) in topWords)
        {
            Console.WriteLine($"  {word}: {count}");
        }
    }
}

