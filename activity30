using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;

class Money
{
    public decimal Amount { get; private set; }
    public string CurrencyCode { get; private set; }

    private static readonly Dictionary<string, string> CurrencySymbols = new()
    {
        {"$", "USD"},
        {"PHP", "PHP"},
        {"€", "EUR"},
        {"£", "GBP"},
        // Add more if needed
    };

    public Money(string input)
    {
        ParseInput(input);
    }

    private void ParseInput(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            throw new ArgumentException("Input is empty.");

        input = input.Trim();

        // Identify currency code or symbol
        string currency = "USD"; // default
        string amountStr = input;

        foreach (var symbol in CurrencySymbols.Keys)
        {
            if (input.StartsWith(symbol, StringComparison.OrdinalIgnoreCase))
            {
                currency = CurrencySymbols[symbol];
                amountStr = input.Substring(symbol.Length).Trim();
                break;
            }
            else if (input.EndsWith(symbol, StringComparison.OrdinalIgnoreCase))
            {
                currency = CurrencySymbols[symbol];
                amountStr = input.Substring(0, input.Length - symbol.Length).Trim();
                break;
            }
        }

        // Remove spaces and currency codes from amountStr (like PHP, USD)
        amountStr = Regex.Replace(amountStr, @"[A-Za-z]", "").Trim();

        // Normalize decimal separators
        // Handle both "1,299.50" and "1299,50"
        // Strategy: if both ',' and '.' exist, decide decimal by last one occurrence

        int lastComma = amountStr.LastIndexOf(',');
        int lastDot = amountStr.LastIndexOf('.');

        if (lastComma >= 0 && lastDot >= 0)
        {
            if (lastDot > lastComma)
            {
                // '.' is decimal separator, remove ',' thousands
                amountStr = amountStr.Replace(",", "");
            }
            else
            {
                // ',' is decimal separator, remove '.' thousands
                amountStr = amountStr.Replace(".", "");
                amountStr = amountStr.Replace(',', '.'); // replace decimal comma with dot
            }
        }
        else if (lastComma >= 0)
        {
            // Only comma present, could be decimal or thousands
            int commaCount = amountStr.Split(',').Length - 1;
            if (commaCount == 1 && amountStr.Length - lastComma <= 3)
            {
                // likely decimal separator, replace with dot
                amountStr = amountStr.Replace(',', '.');
            }
            else
            {
                // likely thousands separator, remove commas
                amountStr = amountStr.Replace(",", "");
            }
        }
        else
        {
            // Only dot or none present; assume dot decimal
            amountStr = amountStr.Replace(",", "");
        }

        if (!decimal.TryParse(amountStr, NumberStyles.Number, CultureInfo.InvariantCulture, out decimal val))
        {
            throw new FormatException("Unable to parse numeric value.");
        }

        Amount = val;
        CurrencyCode = currency;
    }

    public override string ToString()
    {
        return $"{CurrencyCode} {Amount:F2}";
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("=== Currency Formatter & Parser ===");

        List<Money> moneyList = new();

        Console.WriteLine("Enter currency amounts (empty line to finish):");

        while (true)
        {
            string? line = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(line))
                break;

            try
            {
                Money m = new(line);
                moneyList.Add(m);
                Console.WriteLine($"Parsed: {m}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing '{line}': {ex.Message}");
            }
        }

        // Sort by numeric value
        moneyList.Sort((a, b) => a.Amount.CompareTo(b.Amount));

        Console.WriteLine("\nSorted amounts:");
        foreach (var m in moneyList)
        {
            Console.WriteLine(m);
        }
    }
}

